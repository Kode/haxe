- name: Set ADD_REVISION=1 for non-release
  if: ${{ !startsWith(github.ref, 'refs/tags/') }}
  run: echo "ADD_REVISION=1" >> $GITHUB_ENV

- uses: uraimo/run-on-arch-action@v2.0.9
  name: Build artifact
  id: build
  env:
    OPAMYES: 1
  with:
    arch: ${{ matrix.arch }}
    distro: ${{ matrix.distro }}

    # Not required, but speeds up builds
    githubToken: ${{ github.token }}

    # Create an artifacts directory
    setup: |
      mkdir -p "${PWD}/artifacts"

    # Mount the artifacts directory as /artifacts in the container
    dockerRunArgs: |
      --volume "${PWD}/artifacts:/artifacts"

    # Pass the correct artifact name
    env: | # YAML, but pipe character is necessary
      artifact_name: haxe-linux-${{ matrix.arch }}
      arch: ${{ matrix.arch }}

    # The shell to run commands with in the container
    shell: /bin/bash

    # Install some dependencies in the container. This speeds up builds if
    # you are also using githubToken. Any dependencies installed here will
    # be part of the container image that gets cached, so subsequent
    # builds don't have to re-install them. The image layer is cached
    # publicly in your project's package repository, so it is vital that
    # no secrets are present in the container state or logs.
    install: |
      set -ex
      cd ~
      sudo apt-get install -qqy software-properties-common
      sudo add-apt-repository ppa:avsm/ppa -y # provides OPAM 2
      sudo add-apt-repository ppa:haxe/ocaml -y # provides newer version of mbedtls
      sudo apt-get update -qqy
      sudo apt-get install -qqy ocaml-nox camlp5 opam libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libstring-shellquote-perl libipc-system-simple-perl
      opam init # --disable-sandboxing
      opam update
      opam pin add haxe . --no-action
      opam install haxe --deps-only --assume-depexts
      opam list
      ocamlopt -v

    # Produce a binary artifact and place it in the mounted volume
    run: |
      set -ex
      eval $(opam env)
      opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
      make -s package_unix
      ls -l out
      ldd -v ./haxe || file ./haxe
      cp ./haxe "/artifacts/haxe"

- name: Get binary-repository
  run: git clone https://github.com/Kode/${{ matrix.repo }}.git
- name: Copy binary
  run: cp "${PWD}/artifacts/haxe" ${{ matrix.repo }}/haxe && git -C ${{ matrix.repo }} add haxe
- name: Set name
  run: git config --global user.name "Robbot"
- name: Set email
  run: git config --global user.email "robbot2019@robdangero.us"
- name: Commit binary
  id: commit
  continue-on-error: true
  run: git -C ${{ matrix.repo }} commit -a -m "Update Haxe binary to $GITHUB_SHA."
- name: Tag binary
  if: steps.commit.outcome == 'success'
  run: git -C ${{ matrix.repo }} tag haxe_$GITHUB_SHA
- name: Push binary
  id: push1
  if: steps.commit.outcome == 'success'
  continue-on-error: true
  run: git -C ${{ matrix.repo }} push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/${{ matrix.repo }}.git main --tags
  env:
    ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
- name: Pull
  if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
  run: git -C ${{ matrix.repo }} pull --no-rebase
- name: Push binary again
  if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
  continue-on-error: true
  run: git -C ${{ matrix.repo }} push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/${{ matrix.repo }}.git main --tags
  env:
    ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
