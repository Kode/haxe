# TODO: support skip ci (https://github.community/t/github-actions-does-not-respect-skip-ci/17325/8)

name: CI
on: [push, pull_request]

jobs:
  windows64-build:
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      ARCH: 64
      MINGW_ARCH: x86_64
      CYG_ROOT: D:\cygwin
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Use GNU Tar from msys
        run: |
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          rm C:\msys64\usr\bin\bash.exe

      @import install-nsis.yml
      @import install-neko-windows.yml
      @import install-ocaml-windows64.yml
      @import install-ocaml-libs-windows.yml
      @import build-windows.yml

  linux-build:
    runs-on: ubuntu-20.04
    env:
      PLATFORM: linux64
      OPAMYES: 1
    strategy:
      fail-fast: false
      matrix:
        ocaml: ["4.08.1"]
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: ${{ runner.os }}-${{ matrix.ocaml }}-${{ hashFiles('./haxe.opam', './libs/') }}

      @import install-neko-unix.yml

      - name: Install dependencies
        run: |
          set -ex
          sudo add-apt-repository ppa:avsm/ppa -y # provides OPAM 2
          sudo add-apt-repository ppa:haxe/ocaml -y # provides newer version of mbedtls
          sudo apt-get update -qqy
          sudo apt-get install -qqy ocaml-nox camlp5 opam libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libstring-shellquote-perl libipc-system-simple-perl

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam switch create ${{ matrix.ocaml }}
          opam pin add haxe . --no-action
          opam install haxe --deps-only --assume-depexts
          opam list
          ocamlopt -v

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
          make -s package_unix
          ls -l out
          ldd -v ./haxe

      - name: Get KhaTools_linux_x64
        run: git clone https://github.com/Kode/KhaTools_linux_x64.git
      - name: Copy binary
        run: cp ./haxe KhaTools_linux_x64/haxe
      - name: Remove old std
        run: rm -r KhaTools_linux_x64/std
      - name: Copy new std
        run: cp -R std KhaTools_linux_x64/std
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Add everything
        run: git -C KhaTools_linux_x64 add .
      - name: Commit binary
        id: commit
        continue-on-error: true
        run: git -C KhaTools_linux_x64 commit -a -m "Update Haxe binary to $GITHUB_SHA."
      - name: Tag binary
        if: steps.commit.outcome == 'success'
        run: git -C KhaTools_linux_x64 tag haxe_$GITHUB_SHA
      - name: Push binary
        id: push1
        if: steps.commit.outcome == 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_x64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_x64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      - name: Pull
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        run: git -C KhaTools_linux_x64 pull --no-rebase
      - name: Push binary again
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_x64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_x64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}

  linux-arm64-build:
    runs-on: ubuntu-22.04-arm
    env:
      PLATFORM: linux-arm64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: arm-${{ runner.os }}-${{ hashFiles('./haxe.opam', './libs/') }}

      @import install-neko-unix.yml

      - name: Install dependencies
        run: |
          set -ex
          sudo apt-get update -qqy
          sudo apt-get install -qqy ocaml-nox opam libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev libipc-system-simple-perl libstring-shellquote-perl ninja-build

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init
          opam pin add haxe . --no-action
          opam install haxe --deps-only --assume-depexts
          opam list
          ocamlopt -v

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
          make -s package_unix
          ls -l out
          ldd -v ./haxe

      - name: Get KhaTools_linux_arm64
        run: git clone https://github.com/Kode/KhaTools_linux_arm64.git
      - name: Copy binary
        run: cp ./out/linux/arm64/haxe KhaTools_linux_arm64/haxe
      - name: Remove old std
        run: rm -r KhaTools_linux_arm64/std
      - name: Copy new std
        run: cp -R std KhaTools_linux_arm64/std
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Add everything
        run: git -C KhaTools_linux_arm64 add .
      - name: Commit binary
        id: commit
        continue-on-error: true
        run: git -C KhaTools_linux_arm64 commit -a -m "Update Haxe binary to $GITHUB_SHA."
      - name: Tag binary
        if: steps.commit.outcome == 'success'
        run: git -C KhaTools_linux_arm64 tag haxe_$GITHUB_SHA
      - name: Push binary
        id: push1
        if: steps.commit.outcome == 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_arm64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_arm64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      - name: Pull
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        run: git -C KhaTools_linux_arm64 pull --no-rebase
      - name: Push binary again
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_arm64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_arm64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}

  mac-build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-13]
    runs-on: ${{ matrix.os }}
    env:
      PLATFORM: mac${{ matrix.os == 'macos-14' && '-arm64' || '' }}
      OPAMYES: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
      OCAML_VERSION: 5.1.1
      CTYPES: 0.21.1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: ${{ matrix.os }}-${{ hashFiles('./haxe.opam', './libs/') }}

      @import install-neko-unix.yml
      @import build-mac.yml
