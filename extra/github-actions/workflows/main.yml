# TODO: support skip ci (https://github.community/t/github-actions-does-not-respect-skip-ci/17325/8)

name: CI
on: [push, pull_request]

jobs:
  windows64-build:
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      OPAMYES: 1
      OPAMROOT: D:\.opam
      CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
      ARCH: 64
      MINGW_ARCH: x86_64
      CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
      CYG_ROOT: C:/cygwin64
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Use GNU Tar from msys
        run: |
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          rm C:\msys64\usr\bin\bash.exe

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v3.0.11
        with:
          path: D:\.opam
          key: ${{ runner.os }}64-${{ hashFiles('./opam', './libs/') }}

      @import install-neko-windows.yml
      @import install-nsis.yml
      @import install-ocaml-windows64.yml
      @import install-ocaml-libs-windows.yml
      @import build-windows.yml

  linux-build:
    runs-on: ubuntu-20.04
    env:
      PLATFORM: linux64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      @import cache-opam.yml
      @import install-neko-unix.yml

      - name: Install dependencies
        run: |
          set -ex
          sudo add-apt-repository ppa:avsm/ppa -y # provides OPAM 2
          sudo add-apt-repository ppa:haxe/ocaml -y # provides newer version of mbedtls
          sudo apt-get update -qqy
          sudo apt-get install -qqy ocaml-nox camlp5 opam libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libstring-shellquote-perl libipc-system-simple-perl

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam pin add haxe . --no-action
          opam install haxe --deps-only --assume-depexts
          opam list
          ocamlopt -v

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
          make -s package_unix
          ls -l out
          ldd -v ./haxe

      - name: Get KhaTools_linux_x64
        run: git clone https://github.com/Kode/KhaTools_linux_x64.git
      - name: Copy binary
        run: cp ./haxe KhaTools_linux_x64/haxe
      - name: Remove old std
        run: rm -r KhaTools_linux_x64/std
      - name: Copy new std
        run: cp -R std KhaTools_linux_x64/std
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Add everything
        run: git -C KhaTools_linux_x64 add .
      - name: Commit binary
        id: commit
        continue-on-error: true
        run: git -C KhaTools_linux_x64 commit -a -m "Update Haxe binary to $GITHUB_SHA."
      - name: Tag binary
        if: steps.commit.outcome == 'success'
        run: git -C KhaTools_linux_x64 tag haxe_$GITHUB_SHA
      - name: Push binary
        id: push1
        if: steps.commit.outcome == 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_x64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_x64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      - name: Pull
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        run: git -C KhaTools_linux_x64 pull --no-rebase
      - name: Push binary again
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        continue-on-error: true
        run: git -C KhaTools_linux_x64 push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/KhaTools_linux_x64.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}

  linux-arm64:
    runs-on: ubuntu-20.04
    permissions:
      packages: write
    env:
      FORCE_COLOR: 1
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Earthly
        run: sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/download/v0.6.13/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly && /usr/local/bin/earthly bootstrap --with-autocomplete'

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
            image: tonistiigi/binfmt:latest
            platforms: all

      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Set CONTAINER_ vars
        run: |
          echo "CONTAINER_REG=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV;
          echo "CONTAINER_TAG=$(echo ${{ github.ref_name }} | sed -e 's/[^A-Za-z0-9\.]/-/g')" >> $GITHUB_ENV;

      - name: Build devcontainer
        run: earthly --platform=linux/arm64 +devcontainer --IMAGE_NAME="ghcr.io/${CONTAINER_REG}_devcontainer" --IMAGE_TAG="${CONTAINER_TAG}-arm64" --IMAGE_CACHE="ghcr.io/haxefoundation/haxe_devcontainer:development-arm64"
        env:
          EARTHLY_PUSH: "${{ github.event_name == 'push' }}"
          EARTHLY_USE_INLINE_CACHE: true
          EARTHLY_SAVE_INLINE_CACHE: true

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build
        run: earthly --platform=linux/arm64 +build --ADD_REVISION="$ADD_REVISION" --SET_SAFE_DIRECTORY="true"
        env:
          EARTHLY_PUSH: "${{ github.event_name == 'push' }}"
          EARTHLY_REMOTE_CACHE: "ghcr.io/${{env.CONTAINER_REG}}_cache:build-${{env.CONTAINER_TAG}}-arm64"

  mac-build:
    runs-on: macos-latest
    env:
      PLATFORM: mac
      OPAMYES: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      @import cache-opam.yml
      @import install-neko-unix.yml
      @import build-mac.yml
